
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/jdk1.8.0_101.jdk/Contents/Home ///
/// Sun Jul 30 20:01:26 BST 2017 ///

/// interface com.jh.SwiftHelloBinding$Listener ///

public protocol SwiftHelloBinding_Listener: JavaProtocol {

    /// public abstract void com.jh.SwiftHelloBinding$Listener.setCacheDir(java.lang.String)

    func setCacheDir( cacheDir: String? )
    func setCacheDir( _ _cacheDir: String? )

    /// public abstract void com.jh.SwiftHelloBinding$Listener.processNumber(double)

    func processNumber( number: Double )
    func processNumber( _ _number: Double )

    /// public abstract void com.jh.SwiftHelloBinding$Listener.processText(java.lang.String)

    func processText( text: String? )
    func processText( _ _text: String? )

}

open class SwiftHelloBinding_ListenerForward: JNIObjectForward, SwiftHelloBinding_Listener {

    private static var SwiftHelloBinding_ListenerJNIClass: jclass?

    /// public abstract void com.jh.SwiftHelloBinding$Listener.setCacheDir(java.lang.String)

    private static var setCacheDir_MethodID_4: jmethodID?

    open func setCacheDir( cacheDir: String? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: cacheDir, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setCacheDir", methodSig: "(Ljava/lang/String;)V", methodCache: &SwiftHelloBinding_ListenerForward.setCacheDir_MethodID_4, args: &__args, locals: &__locals )
    }

    open func setCacheDir( _ _cacheDir: String? ) {
        setCacheDir( cacheDir: _cacheDir )
    }

    /// public abstract void com.jh.SwiftHelloBinding$Listener.processNumber(double)

    private static var processNumber_MethodID_5: jmethodID?

    open func processNumber( number: Double ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: number, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "processNumber", methodSig: "(D)V", methodCache: &SwiftHelloBinding_ListenerForward.processNumber_MethodID_5, args: &__args, locals: &__locals )
    }

    open func processNumber( _ _number: Double ) {
        processNumber( number: _number )
    }

    /// public abstract void com.jh.SwiftHelloBinding$Listener.processText(java.lang.String)

    private static var processText_MethodID_6: jmethodID?

    open func processText( text: String? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: text, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "processText", methodSig: "(Ljava/lang/String;)V", methodCache: &SwiftHelloBinding_ListenerForward.processText_MethodID_6, args: &__args, locals: &__locals )
    }

    open func processText( _ _text: String? ) {
        processText( text: _text )
    }

}


private typealias SwiftHelloBinding_Listener_setCacheDir_0_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jobject? ) -> ()

private func SwiftHelloBinding_Listener_setCacheDir_0( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ cacheDir: jobject? ) -> () {
    SwiftHelloBinding_ListenerBase.swiftObject( jniEnv: __env, javaObject: __this ).setCacheDir( JNIType.decode( type: String(), from: cacheDir ) )
}

private typealias SwiftHelloBinding_Listener_processNumber_1_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jdouble ) -> ()

private func SwiftHelloBinding_Listener_processNumber_1( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ number: jdouble ) -> () {
    SwiftHelloBinding_ListenerBase.swiftObject( jniEnv: __env, javaObject: __this ).processNumber( JNIType.decode( type: Double(), from: number ) )
}

private typealias SwiftHelloBinding_Listener_processText_2_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jobject? ) -> ()

private func SwiftHelloBinding_Listener_processText_2( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ text: jobject? ) -> () {
    SwiftHelloBinding_ListenerBase.swiftObject( jniEnv: __env, javaObject: __this ).processText( JNIType.decode( type: String(), from: text ) )
}

open class SwiftHelloBinding_ListenerBase: JNIObjectProxy, SwiftHelloBinding_Listener {

    private static var proxyClass: jclass = {
        var natives = [JNINativeMethod]()

        let SwiftHelloBinding_Listener_setCacheDir_0_thunk: SwiftHelloBinding_Listener_setCacheDir_0_type = SwiftHelloBinding_Listener_setCacheDir_0
        natives.append( JNINativeMethod( name: strdup("__setCacheDir"), signature: strdup("(Ljava/lang/String;)V"), fnPtr: unsafeBitCast( SwiftHelloBinding_Listener_setCacheDir_0_thunk, to: UnsafeMutableRawPointer.self ) ) )

        let SwiftHelloBinding_Listener_processNumber_1_thunk: SwiftHelloBinding_Listener_processNumber_1_type = SwiftHelloBinding_Listener_processNumber_1
        natives.append( JNINativeMethod( name: strdup("__processNumber"), signature: strdup("(D)V"), fnPtr: unsafeBitCast( SwiftHelloBinding_Listener_processNumber_1_thunk, to: UnsafeMutableRawPointer.self ) ) )

        let SwiftHelloBinding_Listener_processText_2_thunk: SwiftHelloBinding_Listener_processText_2_type = SwiftHelloBinding_Listener_processText_2
        natives.append( JNINativeMethod( name: strdup("__processText"), signature: strdup("(Ljava/lang/String;)V"), fnPtr: unsafeBitCast( SwiftHelloBinding_Listener_processText_2_thunk, to: UnsafeMutableRawPointer.self ) ) )

        let clazz = JNI.FindClass( "org/genie/com_jh/SwiftHelloBinding_ListenerProxy" )
        withUnsafePointer(to: &natives[0]) {
            nativesPtr in
            if JNI.api.RegisterNatives( JNI.env, clazz, nativesPtr, jint(natives.count) ) != jint(JNI_OK) {
                JNI.report( "Unable to register java natives" )
            }
        }

        return JNI.api.NewGlobalRef( JNI.env, clazz )!
    }()

    public convenience init() {
        self.init( javaObject: nil )
    }

    public required init( javaObject: jobject? ) {
        super.init( javaObject: javaObject )
        createProxy( className: "org/genie/com_jh/SwiftHelloBinding_ListenerProxy", classObject: SwiftHelloBinding_ListenerBase.proxyClass )
    }

    static func swiftObject( jniEnv: UnsafeMutablePointer<JNIEnv?>?, javaObject: jobject? ) -> SwiftHelloBinding_ListenerBase {
        return unsafeBitCast( swiftPointer( jniEnv: jniEnv, object: javaObject ), to: SwiftHelloBinding_ListenerBase.self )
    }

    /// public abstract void com.jh.SwiftHelloBinding$Listener.setCacheDir(java.lang.String)

    open func setCacheDir( cacheDir: String? ) /**/ {
    }

    open func setCacheDir( _ _cacheDir: String? ) /**/ {
        setCacheDir( cacheDir: _cacheDir )
    }

    /// public abstract void com.jh.SwiftHelloBinding$Listener.processNumber(double)

    open func processNumber( number: Double ) /**/ {
    }

    open func processNumber( _ _number: Double ) /**/ {
        processNumber( number: _number )
    }

    /// public abstract void com.jh.SwiftHelloBinding$Listener.processText(java.lang.String)

    open func processText( text: String? ) /**/ {
    }

    open func processText( _ _text: String? ) /**/ {
        processText( text: _text )
    }

}
