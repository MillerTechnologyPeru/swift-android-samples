
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/jdk1.8.0_101.jdk/Contents/Home ///
/// Sun Aug 06 01:21:22 BST 2017 ///

/// interface com.johnholdsworth.bindings.SwiftHelloBinding$Listener ///

public protocol SwiftHelloBinding_Listener: JavaProtocol {

    /// public abstract void com.johnholdsworth.bindings.SwiftHelloBinding$Listener.setCacheDir(java.lang.String)

    func setCacheDir( cacheDir: String? )

    /// public abstract void com.johnholdsworth.bindings.SwiftHelloBinding$Listener.processNumber(double)

    func processNumber( number: Double )

    /// public abstract void com.johnholdsworth.bindings.SwiftHelloBinding$Listener.processText(java.lang.String)

    func processText( text: String? )

    /// public abstract void com.johnholdsworth.bindings.SwiftHelloBinding$Listener.processedMap(com.johnholdsworth.bindings.SwiftHelloTypes$ListenerMap)

    func processedMap( map: [String:SwiftHelloTypes_TextListener]? )

    /// public abstract void com.johnholdsworth.bindings.SwiftHelloBinding$Listener.processedMapList(com.johnholdsworth.bindings.SwiftHelloTypes$ListenerMapList)

    func processedMapList( map: [String:[SwiftHelloTypes_TextListener]]? )

    /// public abstract com.johnholdsworth.bindings.SwiftHelloTest$TestListener com.johnholdsworth.bindings.SwiftHelloBinding$Listener.testResponder(int)

    func testResponder( loopback: Int ) -> SwiftHelloTest_TestListener!

}


open class SwiftHelloBinding_ListenerForward: JNIObjectForward, SwiftHelloBinding_Listener {

    private static var SwiftHelloBinding_ListenerJNIClass: jclass?

    /// public abstract void com.johnholdsworth.bindings.SwiftHelloBinding$Listener.setCacheDir(java.lang.String)

    private static var setCacheDir_MethodID_7: jmethodID?

    open func setCacheDir( cacheDir: String? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: cacheDir, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setCacheDir", methodSig: "(Ljava/lang/String;)V", methodCache: &SwiftHelloBinding_ListenerForward.setCacheDir_MethodID_7, args: &__args, locals: &__locals )
    }

    open func setCacheDir( _ _cacheDir: String? ) {
        setCacheDir( cacheDir: _cacheDir )
    }

    /// public abstract void com.johnholdsworth.bindings.SwiftHelloBinding$Listener.processNumber(double)

    private static var processNumber_MethodID_8: jmethodID?

    open func processNumber( number: Double ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: number, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "processNumber", methodSig: "(D)V", methodCache: &SwiftHelloBinding_ListenerForward.processNumber_MethodID_8, args: &__args, locals: &__locals )
    }

    open func processNumber( _ _number: Double ) {
        processNumber( number: _number )
    }

    /// public abstract void com.johnholdsworth.bindings.SwiftHelloBinding$Listener.processText(java.lang.String)

    private static var processText_MethodID_9: jmethodID?

    open func processText( text: String? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: text, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "processText", methodSig: "(Ljava/lang/String;)V", methodCache: &SwiftHelloBinding_ListenerForward.processText_MethodID_9, args: &__args, locals: &__locals )
    }

    open func processText( _ _text: String? ) {
        processText( text: _text )
    }

    /// public abstract void com.johnholdsworth.bindings.SwiftHelloBinding$Listener.processedMap(com.johnholdsworth.bindings.SwiftHelloTypes$ListenerMap)

    private static var processedMap_MethodID_10: jmethodID?

    open func processedMap( map: [String:SwiftHelloTypes_TextListener]? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: map, mapClass: "com/johnholdsworth/bindings/SwiftHelloTypes$ListenerMap", locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "processedMap", methodSig: "(Lcom/johnholdsworth/bindings/SwiftHelloTypes$ListenerMap;)V", methodCache: &SwiftHelloBinding_ListenerForward.processedMap_MethodID_10, args: &__args, locals: &__locals )
    }

    open func processedMap( _ _map: [String:SwiftHelloTypes_TextListener]? ) {
        processedMap( map: _map )
    }

    /// public abstract void com.johnholdsworth.bindings.SwiftHelloBinding$Listener.processedMapList(com.johnholdsworth.bindings.SwiftHelloTypes$ListenerMapList)

    private static var processedMapList_MethodID_11: jmethodID?

    open func processedMapList( map: [String:[SwiftHelloTypes_TextListener]]? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: map, mapClass: "com/johnholdsworth/bindings/SwiftHelloTypes$ListenerMapList", locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "processedMapList", methodSig: "(Lcom/johnholdsworth/bindings/SwiftHelloTypes$ListenerMapList;)V", methodCache: &SwiftHelloBinding_ListenerForward.processedMapList_MethodID_11, args: &__args, locals: &__locals )
    }

    open func processedMapList( _ _map: [String:[SwiftHelloTypes_TextListener]]? ) {
        processedMapList( map: _map )
    }

    /// public abstract com.johnholdsworth.bindings.SwiftHelloTest$TestListener com.johnholdsworth.bindings.SwiftHelloBinding$Listener.testResponder(int)

    private static var testResponder_MethodID_12: jmethodID?

    open func testResponder( loopback: Int ) -> SwiftHelloTest_TestListener! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: loopback, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "testResponder", methodSig: "(I)Lcom/johnholdsworth/bindings/SwiftHelloTest$TestListener;", methodCache: &SwiftHelloBinding_ListenerForward.testResponder_MethodID_12, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? SwiftHelloTest_TestListenerForward( javaObject: __return ) : nil
    }

    open func testResponder( _ _loopback: Int ) -> SwiftHelloTest_TestListener! {
        return testResponder( loopback: _loopback )
    }

}


private typealias SwiftHelloBinding_Listener_setCacheDir_0_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jlong, _: jobject? ) -> ()

private func SwiftHelloBinding_Listener_setCacheDir_0( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ __swiftObject: jlong, _ cacheDir: jobject? ) -> () {
    JNI.inNative = true;
    SwiftHelloBinding_ListenerLocal_.swiftObject( jniEnv: __env, javaObject: __this, swiftObject: __swiftObject ).setCacheDir( cacheDir: JNIType.toSwift( type: String(), from: cacheDir ) )
    JNI.inNative = false;
}

private typealias SwiftHelloBinding_Listener_processNumber_1_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jlong, _: jdouble ) -> ()

private func SwiftHelloBinding_Listener_processNumber_1( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ __swiftObject: jlong, _ number: jdouble ) -> () {
    JNI.inNative = true;
    SwiftHelloBinding_ListenerLocal_.swiftObject( jniEnv: __env, javaObject: __this, swiftObject: __swiftObject ).processNumber( number: JNIType.toSwift( type: Double(), from: number ) )
    JNI.inNative = false;
}

private typealias SwiftHelloBinding_Listener_processText_2_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jlong, _: jobject? ) -> ()

private func SwiftHelloBinding_Listener_processText_2( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ __swiftObject: jlong, _ text: jobject? ) -> () {
    JNI.inNative = true;
    SwiftHelloBinding_ListenerLocal_.swiftObject( jniEnv: __env, javaObject: __this, swiftObject: __swiftObject ).processText( text: JNIType.toSwift( type: String(), from: text ) )
    JNI.inNative = false;
}

private typealias SwiftHelloBinding_Listener_processedMap_3_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jlong, _: jobject? ) -> ()

private func SwiftHelloBinding_Listener_processedMap_3( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ __swiftObject: jlong, _ map: jobject? ) -> () {
    JNI.inNative = true;
    SwiftHelloBinding_ListenerLocal_.swiftObject( jniEnv: __env, javaObject: __this, swiftObject: __swiftObject ).processedMap( map: JNIType.toSwift( type: [String:SwiftHelloTypes_TextListenerForward](), from: map ) )
    JNI.inNative = false;
}

private typealias SwiftHelloBinding_Listener_processedMapList_4_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jlong, _: jobject? ) -> ()

private func SwiftHelloBinding_Listener_processedMapList_4( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ __swiftObject: jlong, _ map: jobject? ) -> () {
    JNI.inNative = true;
    SwiftHelloBinding_ListenerLocal_.swiftObject( jniEnv: __env, javaObject: __this, swiftObject: __swiftObject ).processedMapList( map: JNIType.toSwift( type: [String:[SwiftHelloTypes_TextListenerForward]](), from: map ) )
    JNI.inNative = false;
}

private typealias SwiftHelloBinding_Listener_testResponder_5_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jlong, _: jint ) -> jobject?

private func SwiftHelloBinding_Listener_testResponder_5( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ __swiftObject: jlong, _ loopback: jint ) -> jobject? {
    JNI.inNative = true;
    let __return = SwiftHelloBinding_ListenerLocal_.swiftObject( jniEnv: __env, javaObject: __this, swiftObject: __swiftObject ).testResponder( loopback: JNIType.toSwift( type: Int(), from: loopback ) )
    JNI.inNative = false;
    var locals = [jobject]()
    return JNI.check( JNIType.toJava( value: __return, locals: &locals ).l, &locals, removeLast: true )
}

fileprivate class SwiftHelloBinding_ListenerLocal_: JNILocalProxy<SwiftHelloBinding_Listener, Any> {

    fileprivate static let _proxyClass: jclass = {
        var natives = [JNINativeMethod]()

        let SwiftHelloBinding_Listener_setCacheDir_0_thunk: SwiftHelloBinding_Listener_setCacheDir_0_type = SwiftHelloBinding_Listener_setCacheDir_0
        natives.append( JNINativeMethod( name: strdup("__setCacheDir"), signature: strdup("(JLjava/lang/String;)V"), fnPtr: unsafeBitCast( SwiftHelloBinding_Listener_setCacheDir_0_thunk, to: UnsafeMutableRawPointer.self ) ) )

        let SwiftHelloBinding_Listener_processNumber_1_thunk: SwiftHelloBinding_Listener_processNumber_1_type = SwiftHelloBinding_Listener_processNumber_1
        natives.append( JNINativeMethod( name: strdup("__processNumber"), signature: strdup("(JD)V"), fnPtr: unsafeBitCast( SwiftHelloBinding_Listener_processNumber_1_thunk, to: UnsafeMutableRawPointer.self ) ) )

        let SwiftHelloBinding_Listener_processText_2_thunk: SwiftHelloBinding_Listener_processText_2_type = SwiftHelloBinding_Listener_processText_2
        natives.append( JNINativeMethod( name: strdup("__processText"), signature: strdup("(JLjava/lang/String;)V"), fnPtr: unsafeBitCast( SwiftHelloBinding_Listener_processText_2_thunk, to: UnsafeMutableRawPointer.self ) ) )

        let SwiftHelloBinding_Listener_processedMap_3_thunk: SwiftHelloBinding_Listener_processedMap_3_type = SwiftHelloBinding_Listener_processedMap_3
        natives.append( JNINativeMethod( name: strdup("__processedMap"), signature: strdup("(JLcom/johnholdsworth/bindings/SwiftHelloTypes$ListenerMap;)V"), fnPtr: unsafeBitCast( SwiftHelloBinding_Listener_processedMap_3_thunk, to: UnsafeMutableRawPointer.self ) ) )

        let SwiftHelloBinding_Listener_processedMapList_4_thunk: SwiftHelloBinding_Listener_processedMapList_4_type = SwiftHelloBinding_Listener_processedMapList_4
        natives.append( JNINativeMethod( name: strdup("__processedMapList"), signature: strdup("(JLcom/johnholdsworth/bindings/SwiftHelloTypes$ListenerMapList;)V"), fnPtr: unsafeBitCast( SwiftHelloBinding_Listener_processedMapList_4_thunk, to: UnsafeMutableRawPointer.self ) ) )

        let SwiftHelloBinding_Listener_testResponder_5_thunk: SwiftHelloBinding_Listener_testResponder_5_type = SwiftHelloBinding_Listener_testResponder_5
        natives.append( JNINativeMethod( name: strdup("__testResponder"), signature: strdup("(JI)Lcom/johnholdsworth/bindings/SwiftHelloTest$TestListener;"), fnPtr: unsafeBitCast( SwiftHelloBinding_Listener_testResponder_5_thunk, to: UnsafeMutableRawPointer.self ) ) )

        natives.append( JNINativeMethod( name: strdup("__finalize"), signature: strdup("(J)V"), fnPtr: unsafeBitCast( JNIReleasableProxy__finalize_thunk, to: UnsafeMutableRawPointer.self ) ) )

        let clazz = JNI.FindClass( proxyClassName() )
        withUnsafePointer(to: &natives[0]) {
            nativesPtr in
            if JNI.api.RegisterNatives( JNI.env, clazz, nativesPtr, jint(natives.count) ) != jint(JNI_OK) {
                JNI.report( "Unable to register java natives" )
            }
        }

        defer { JNI.DeleteLocalRef( clazz ) }
        return JNI.api.NewGlobalRef( JNI.env, clazz )!
    }()

    override open class func proxyClassName() -> String { return "org/swiftjava/com_johnholdsworth/SwiftHelloBinding_ListenerProxy" }
    override open class func proxyClass() -> jclass? { return _proxyClass }

}

extension SwiftHelloBinding_Listener {

    public func localJavaObject( _ locals: UnsafeMutablePointer<[jobject]> ) -> jobject? {
        return SwiftHelloBinding_ListenerLocal_( owned: self, proto: self ).localJavaObject( locals )
    }

}

open class SwiftHelloBinding_ListenerBase: SwiftHelloBinding_Listener {

    public init() {}

    /// public abstract void com.johnholdsworth.bindings.SwiftHelloBinding$Listener.setCacheDir(java.lang.String)

    open func setCacheDir( cacheDir: String? ) /**/ {
    }

    open func setCacheDir( _ _cacheDir: String? ) /**/ {
        setCacheDir( cacheDir: _cacheDir )
    }

    /// public abstract void com.johnholdsworth.bindings.SwiftHelloBinding$Listener.processNumber(double)

    open func processNumber( number: Double ) /**/ {
    }

    open func processNumber( _ _number: Double ) /**/ {
        processNumber( number: _number )
    }

    /// public abstract void com.johnholdsworth.bindings.SwiftHelloBinding$Listener.processText(java.lang.String)

    open func processText( text: String? ) /**/ {
    }

    open func processText( _ _text: String? ) /**/ {
        processText( text: _text )
    }

    /// public abstract void com.johnholdsworth.bindings.SwiftHelloBinding$Listener.processedMap(com.johnholdsworth.bindings.SwiftHelloTypes$ListenerMap)

    open func processedMap( map: [String:SwiftHelloTypes_TextListener]? ) /**/ {
    }

    open func processedMap( _ _map: [String:SwiftHelloTypes_TextListener]? ) /**/ {
        processedMap( map: _map )
    }

    /// public abstract void com.johnholdsworth.bindings.SwiftHelloBinding$Listener.processedMapList(com.johnholdsworth.bindings.SwiftHelloTypes$ListenerMapList)

    open func processedMapList( map: [String:[SwiftHelloTypes_TextListener]]? ) /**/ {
    }

    open func processedMapList( _ _map: [String:[SwiftHelloTypes_TextListener]]? ) /**/ {
        processedMapList( map: _map )
    }

    /// public abstract com.johnholdsworth.bindings.SwiftHelloTest$TestListener com.johnholdsworth.bindings.SwiftHelloBinding$Listener.testResponder(int)

    open func testResponder( loopback: Int ) -> SwiftHelloTest_TestListener! /**/ {
        return nil
    }

    open func testResponder( _ _loopback: Int ) -> SwiftHelloTest_TestListener! /**/ {
        return testResponder( loopback: _loopback )
    }

}
