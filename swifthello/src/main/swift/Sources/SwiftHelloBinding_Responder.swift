
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// interface com.johnholdsworth.bindings.SwiftHelloBinding$Responder ///

public protocol SwiftHelloBinding_Responder: JavaProtocol {

    /// public abstract java.lang.String[] com.johnholdsworth.bindings.SwiftHelloBinding$Responder.debug(java.lang.String)

    func debug( msg: String? ) -> [String]!

    /// public abstract com.johnholdsworth.bindings.SwiftHelloTest$TestListener com.johnholdsworth.bindings.SwiftHelloBinding$Responder.testResponder(int)

    func testResponder( loopback: Int ) -> SwiftHelloTest_TestListener!

    /// public abstract void com.johnholdsworth.bindings.SwiftHelloBinding$Responder.processedNumber(double)

    func processedNumber( number: Double )

    /// public abstract void com.johnholdsworth.bindings.SwiftHelloBinding$Responder.processedText(java.lang.String)

    func processedText( text: String? )

    /// public abstract void com.johnholdsworth.bindings.SwiftHelloBinding$Responder.processedTextListener(com.johnholdsworth.bindings.SwiftHelloTypes$TextListener)

    func processedTextListener( text: SwiftHelloTypes_TextListener? )

    /// public abstract void com.johnholdsworth.bindings.SwiftHelloBinding$Responder.processedTextListenerArray(com.johnholdsworth.bindings.SwiftHelloTypes$TextListener[])

    func processedTextListenerArray( text: [SwiftHelloTypes_TextListener]? )

    /// public abstract void com.johnholdsworth.bindings.SwiftHelloBinding$Responder.processMap(com.johnholdsworth.bindings.SwiftHelloTypes$ListenerMap)

    func processMap( map: [String:SwiftHelloTypes_TextListener]? )

    /// public abstract void com.johnholdsworth.bindings.SwiftHelloBinding$Responder.processedTextListener2dArray(com.johnholdsworth.bindings.SwiftHelloTypes$TextListener[][])

    func processedTextListener2dArray( text: [[SwiftHelloTypes_TextListener]]? )

    /// public abstract void com.johnholdsworth.bindings.SwiftHelloBinding$Responder.processMapList(com.johnholdsworth.bindings.SwiftHelloTypes$ListenerMapList)

    func processMapList( map: [String:[SwiftHelloTypes_TextListener]]? )

}


open class SwiftHelloBinding_ResponderForward: JNIObjectForward, SwiftHelloBinding_Responder {

    private static var SwiftHelloBinding_ResponderJNIClass: jclass?

    /// public abstract java.lang.String[] com.johnholdsworth.bindings.SwiftHelloBinding$Responder.debug(java.lang.String)

    private static var debug_MethodID_10: jmethodID?

    open func debug( msg: String? ) -> [String]! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: msg, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "debug", methodSig: "(Ljava/lang/String;)[Ljava/lang/String;", methodCache: &SwiftHelloBinding_ResponderForward.debug_MethodID_10, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: [String](), from: __return )
    }

    open func debug( _ _msg: String? ) -> [String]! {
        return debug( msg: _msg )
    }

    /// public abstract com.johnholdsworth.bindings.SwiftHelloTest$TestListener com.johnholdsworth.bindings.SwiftHelloBinding$Responder.testResponder(int)

    private static var testResponder_MethodID_11: jmethodID?

    open func testResponder( loopback: Int ) -> SwiftHelloTest_TestListener! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: loopback, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "testResponder", methodSig: "(I)Lcom/johnholdsworth/bindings/SwiftHelloTest$TestListener;", methodCache: &SwiftHelloBinding_ResponderForward.testResponder_MethodID_11, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? SwiftHelloTest_TestListenerForward( javaObject: __return ) : nil
    }

    open func testResponder( _ _loopback: Int ) -> SwiftHelloTest_TestListener! {
        return testResponder( loopback: _loopback )
    }

    /// public abstract void com.johnholdsworth.bindings.SwiftHelloBinding$Responder.processedNumber(double)

    private static var processedNumber_MethodID_12: jmethodID?

    open func processedNumber( number: Double ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: number, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "processedNumber", methodSig: "(D)V", methodCache: &SwiftHelloBinding_ResponderForward.processedNumber_MethodID_12, args: &__args, locals: &__locals )
    }

    open func processedNumber( _ _number: Double ) {
        processedNumber( number: _number )
    }

    /// public abstract void com.johnholdsworth.bindings.SwiftHelloBinding$Responder.processedText(java.lang.String)

    private static var processedText_MethodID_13: jmethodID?

    open func processedText( text: String? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: text, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "processedText", methodSig: "(Ljava/lang/String;)V", methodCache: &SwiftHelloBinding_ResponderForward.processedText_MethodID_13, args: &__args, locals: &__locals )
    }

    open func processedText( _ _text: String? ) {
        processedText( text: _text )
    }

    /// public abstract void com.johnholdsworth.bindings.SwiftHelloBinding$Responder.processedTextListener(com.johnholdsworth.bindings.SwiftHelloTypes$TextListener)

    private static var processedTextListener_MethodID_14: jmethodID?

    open func processedTextListener( text: SwiftHelloTypes_TextListener? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: text, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "processedTextListener", methodSig: "(Lcom/johnholdsworth/bindings/SwiftHelloTypes$TextListener;)V", methodCache: &SwiftHelloBinding_ResponderForward.processedTextListener_MethodID_14, args: &__args, locals: &__locals )
    }

    open func processedTextListener( _ _text: SwiftHelloTypes_TextListener? ) {
        processedTextListener( text: _text )
    }

    /// public abstract void com.johnholdsworth.bindings.SwiftHelloBinding$Responder.processedTextListenerArray(com.johnholdsworth.bindings.SwiftHelloTypes$TextListener[])

    private static var processedTextListenerArray_MethodID_15: jmethodID?

    open func processedTextListenerArray( text: [SwiftHelloTypes_TextListener]? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: text, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "processedTextListenerArray", methodSig: "([Lcom/johnholdsworth/bindings/SwiftHelloTypes$TextListener;)V", methodCache: &SwiftHelloBinding_ResponderForward.processedTextListenerArray_MethodID_15, args: &__args, locals: &__locals )
    }

    open func processedTextListenerArray( _ _text: [SwiftHelloTypes_TextListener]? ) {
        processedTextListenerArray( text: _text )
    }

    /// public abstract void com.johnholdsworth.bindings.SwiftHelloBinding$Responder.processMap(com.johnholdsworth.bindings.SwiftHelloTypes$ListenerMap)

    private static var processMap_MethodID_16: jmethodID?

    open func processMap( map: [String:SwiftHelloTypes_TextListener]? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: map, mapClass: "com/johnholdsworth/bindings/SwiftHelloTypes$ListenerMap", locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "processMap", methodSig: "(Lcom/johnholdsworth/bindings/SwiftHelloTypes$ListenerMap;)V", methodCache: &SwiftHelloBinding_ResponderForward.processMap_MethodID_16, args: &__args, locals: &__locals )
    }

    open func processMap( _ _map: [String:SwiftHelloTypes_TextListener]? ) {
        processMap( map: _map )
    }

    /// public abstract void com.johnholdsworth.bindings.SwiftHelloBinding$Responder.processedTextListener2dArray(com.johnholdsworth.bindings.SwiftHelloTypes$TextListener[][])

    private static var processedTextListener2dArray_MethodID_17: jmethodID?

    open func processedTextListener2dArray( text: [[SwiftHelloTypes_TextListener]]? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: text, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "processedTextListener2dArray", methodSig: "([[Lcom/johnholdsworth/bindings/SwiftHelloTypes$TextListener;)V", methodCache: &SwiftHelloBinding_ResponderForward.processedTextListener2dArray_MethodID_17, args: &__args, locals: &__locals )
    }

    open func processedTextListener2dArray( _ _text: [[SwiftHelloTypes_TextListener]]? ) {
        processedTextListener2dArray( text: _text )
    }

    /// public abstract void com.johnholdsworth.bindings.SwiftHelloBinding$Responder.processMapList(com.johnholdsworth.bindings.SwiftHelloTypes$ListenerMapList)

    private static var processMapList_MethodID_18: jmethodID?

    open func processMapList( map: [String:[SwiftHelloTypes_TextListener]]? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: map, mapClass: "com/johnholdsworth/bindings/SwiftHelloTypes$ListenerMapList", locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "processMapList", methodSig: "(Lcom/johnholdsworth/bindings/SwiftHelloTypes$ListenerMapList;)V", methodCache: &SwiftHelloBinding_ResponderForward.processMapList_MethodID_18, args: &__args, locals: &__locals )
    }

    open func processMapList( _ _map: [String:[SwiftHelloTypes_TextListener]]? ) {
        processMapList( map: _map )
    }

}


